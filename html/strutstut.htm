<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" xmlns="http://www.w3.org/1999/xhtml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:v="urn:schemas-microsoft-com:vml">

<!-- #BeginTemplate "../master.dwt" -->

<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<!-- #BeginEditable "doctitle" -->
<title>Struts MVC Interview Question: Tutorial, Notes</title>

<!-- #EndEditable -->
<link href="../styles/style2.css" rel="stylesheet" type="text/css" />
<style type="text/css">

.auto-style1 {
	border-width: 0px;
}
.auto-style2 {
	font-family: Cambria, Cochin, Georgia, Times, "Times New Roman", serif;
	font-size: xx-large;
}
.auto-style3 {
	font-family: Cambria, Cochin, Georgia, Times, "Times New Roman", serif;
}
</style>
</head>

<body>

<!-- Begin Container -->
<div id="container">
	<!-- Begin Masthead -->
	<div id="masthead">
		<a href="../default.html">
		<img alt="My developer connection home" height="88" src="../images/MDC-logo.gif" width="282" class="auto-style1" /></a>
		<span class="auto-style2"><strong>My Developer Connection</strong><br />
		</span><span class="auto-style3">knowledgebase for software developers</span></div>
	<!-- End Masthead -->
	<!-- Begin Page Content -->
	<div id="page_content" style="left: 0px; top: 0px; height: 569px">
		<!-- Begin Sidebar -->
		<div id="sidebar">
			<ul>
				<li><a href="../default.html">Home</a></li>
				<li><a href="../about_mdc.htm">About</a></li>
				<li><a href="../bestpracticelist.htm">Best Practices</a></li>
				<li><a href="../articlelist.htm">Articles</a></li>
				<li><a href="../tutoriallist.htm">Tutorials</a></li>
				<li><a href="../tipslist.htm">Tips and Samples</a></li>
				<li><a href="#">Architecture</a></li>
				<li><a href="../faqs.htm">FAQs</a></li>
			</ul>
		</div>
		<!-- End Sidebar -->
		<!-- Begin Content -->
		<div id="content">
			<!-- #BeginEditable "content" -->

<p><a name="h3">Model-View-Controller (MVC)</a></p>
<p>JSP tags solved only part of our problem. We still have issues with 
validation, flow control, and updating the state of the application. This is 
where MVC comes to the rescue. MVC helps resolve some of the issues with the 
single module approach by dividing the problem into three categories: </p>
<ul type="disc">
  <li>
  Model
  <br>
  The model contains the core of the application&#39;s functionality. The model 
  encapsulates the state of the application. Sometimes the only functionality it 
  contains is state. It knows nothing about the view or controller. </li>
  <li>
  View
  <br>
  The view provides the presentation of the model. It is the look of the 
  application. The view can access the model getters, but it has no knowledge of 
  the setters. In addition, it knows nothing about the controller. The view 
  should be notified when changes to the model occur. </li>
  <li>
  Controller <br>
  The controller reacts to the user input. It creates and sets the model.
  </li>
</ul>
<p>&nbsp;</p>
<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" width="100%" style="width: 100.0%; font-size: 10.0pt; font-family: Times New Roman">
  <tr>
    <td>
    <!--[if gte vml 1]><v:shapetype id="_x0000_t75"
 coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe"
 filled="f" stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_s1037" type="#_x0000_t75" alt="" style='width:.75pt;
 height:.75pt'>
 <v:imagedata src="strutstut_files/image001.gif" o:href="http://www.ibm.com/i/v14/rules/blue_rule.gif"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=1 height=1
src="strutstut_files/image001.gif" v:shapes="_x0000_s1037"><![endif]></td>
  </tr>
</table>
<p>&nbsp;<a name="h4">MVC Model 2</a></p>
<p>The Web brought some unique challenges to software developers, most notably 
the stateless connection between the client and the server. This stateless 
behavior made it difficult for the model to notify the view of changes. On the 
Web, the browser has to re-query the server to discover modification to the 
state of the application.</p>
<p>Another noticeable change is that the view uses different technology for 
implementation than the model or controller. Of course, we could use Java (or 
PERL, C/C++ or what ever) code to generate HTML. There are several disadvantages 
to that approach: </p>
<ul type="disc">
  <li>
  Java programmers should develop services, not HTML. </li>
  <li>
  Changes to layout would require changes to code. </li>
  <li>
  Customers of the service should be able to create pages to meet their specific 
  needs. </li>
  <li>
  The page designer isn&#39;t able to have direct involvement in page development. </li>
  <li>
  HTML embedded into code is ugly. </li>
</ul>
<p>For the Web, the classical form of MVC needed to change. Figure 4 displays 
the Web adaptation of MVC, also commonly known as MVC Model 2 or MVC 2. </p>
<p>&nbsp;</p>
<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" width="100%" style="width: 100.0%; font-size: 10.0pt; font-family: Times New Roman">
  <tr>
    <td>
    <!--[if gte vml 1]><v:shape
 id="_x0000_s1039" type="#_x0000_t75" alt="" style='width:.75pt;height:.75pt'>
 <v:imagedata src="strutstut_files/image001.gif" o:href="http://www.ibm.com/i/v14/rules/blue_rule.gif"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=1 height=1
src="strutstut_files/image001.gif" v:shapes="_x0000_s1039"><![endif]></td>
  </tr>
</table>
<p>&nbsp;</p>
<p><a name="h6">Struts details</a></p>
<p>Displayed in Figure 6 is a stripped-down UML diagram of the 
org.apache.struts.action package. Figure 6 shows the minimal relationships among 
ActionServlet (Controller), ActionForm (Form State), and Action (Model Wrapper). </p>
<p><br>
<a name="N101FC">Figure 6. UML diagram of the relationship of the Command 
(ActionServlet) to the Model (Action &amp; ActionForm)</a><br>
<!--[if gte vml 1]><v:shape
 id="_x0000_s1041" type="#_x0000_t75" alt="Relationship of ActionServlet to Action and ActionForm"
 style='width:450pt;height:171pt'>
 <v:imagedata src="strutstut_files/image002.jpg" o:href="http://www-128.ibm.com/developerworks/ibm/library/j-struts/action_servlet.jpg"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=600 height=228
src="strutstut_files/image003.jpg"
alt="Relationship of ActionServlet to Action and ActionForm" v:shapes="_x0000_s1041"><![endif]></p>
<p>The <b>ActionServlet</b> class <br>
Do you remember the days of function mappings? You would map some input event to 
a pointer to a function. If you where slick, you would place the configuration 
information into a file and load the file at run time. Function pointer arrays 
were the good old days of structured programming in C. </p>
<p>Life is better now that we have Java technology, XML, J2EE, and all that. The 
Struts Controller is a servlet that maps events (an event generally being an 
HTTP post) to classes. And guess what -- the Controller uses a configuration 
file so you don_t have to hard-code the values. Life changes, but stays the 
same. </p>
<p>ActionServlet is the Command part of the MVC implementation and is the core 
of the Framework. ActionServlet (Command) creates and uses Action, an 
ActionForm, and ActionForward. As mentioned earlier, the struts-config.xml file 
configures the Command. During the creation of the Web project, Action and 
ActionForm are extended to solve the specific problem space. The file 
struts-config.xml instructs ActionServlet on how to use the extended classes. 
There are several advantages to this approach: </p>
<ul type="disc">
  <li>
  The entire logical flow of the application is in a hierarchical text file. 
  This makes it easier to view and understand, especially with large 
  applications. </li>
  <li>
  The page designer does not have to wade through Java code to understand the 
  flow of the application. </li>
  <li>
  The Java developer does not need to recompile code when making flow changes. </li>
</ul>
<p>Command functionality can be added by extending ActionServlet.</p>
<p>The <b>ActionForm</b> class </p>
<p>ActionForm maintains the session state for the Web application. ActionForm is 
an abstract class that is sub-classed for each input form model. When I say 
input form model, I am saying ActionForm represents a general concept of data 
that is set or updated by a HTML form. For instance, you may have a 
UserActionForm that is set by an HTML Form. The Struts framework will: </p>
<ul type="disc">
  <li>
  Check to see if a UserActionForm exists; if not, it will create an instance of 
  the class. </li>
  <li>
  Struts will set the state of the UserActionForm using corresponding fields 
  from the HttpServletRequest. No more dreadful request.getParameter() calls. 
  For instance, the Struts framework will take fname from request stream and 
  call UserActionForm.setFname(). </li>
  <li>
  The Struts framework updates the state of the UserActionForm before passing it 
  to the business wrapper UserAction. </li>
  <li>
  Before passing it to the Action class, Struts will also conduct form state 
  validation by calling the validation() method on UserActionForm. Note: This is 
  not always wise to do. There might be ways of using UserActionForm in other 
  pages or business objects, where the validation might be different. Validation 
  of the state might be better in the UserAction class. </li>
  <li>
  The UserActionForm can be maintained at a session level. </li>
</ul>
<p>Notes: </p>
<ul type="disc">
  <li>
  The struts-config.xml file controls which HTML form request maps to which 
  ActionForm. </li>
  <li>
  Multiple requests can be mapped UserActionForm. </li>
  <li>
  UserActionForm can be mapped over multiple pages for things such as wizards. </li>
</ul>
<p>The <b>Action</b> class <br>
The Action class is a wrapper around the business logic. The purpose of Action 
class is to translate the HttpServletRequest to the business logic. To use 
Action, subclass and overwrite the execute() method. </p>
<p>The ActionServlet (Command) passes the parameterized classes to ActionForm 
using the perform() method. Again, no more dreadful request.getParameter() 
calls. By the time the event gets here, the input form data (or HTML form data) 
has already been translated out of the request stream and into an ActionForm 
class. </p>
<p><br>
<a name="N1030F">Figure 4. MVC Model 2</a><br>
<!--[if gte vml 1]><v:shape
 id="_x0000_s1042" type="#_x0000_t75" alt="MVC Model 2" style='width:307.5pt;
 height:127.5pt'>
 <v:imagedata src="strutstut_files/image004.gif" o:href="http://www-128.ibm.com/developerworks/ibm/library/j-struts/mvc2.gif"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=410 height=170
src="strutstut_files/image004.gif" alt="MVC Model 2" v:shapes="_x0000_s1042"><![endif]></p>
<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" width="100%" style="width: 100.0%; font-size: 10.0pt; font-family: Times New Roman">
  <tr>
    <td>
    <!--[if gte vml 1]><v:shape
 id="_x0000_s1043" type="#_x0000_t75" alt="" style='width:.75pt;height:.75pt'>
 <v:imagedata src="strutstut_files/image001.gif" o:href="http://www.ibm.com/i/v14/rules/blue_rule.gif"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=1 height=1
src="strutstut_files/image001.gif" v:shapes="_x0000_s1043"><![endif]></td>
  </tr>
</table>
<p>&nbsp;</p>
<p><a name="h5">Struts, an MVC 2 implementation</a></p>
<p>Struts is a set of cooperating classes, servlets, and JSP tags that make up a 
reusable MVC 2 design. This definition implies that Struts is a framework, 
rather than a library, but Struts also contains an extensive tag library and 
utility classes that work independently of the framework. Figure 5 displays an 
overview of Struts. </p>
<p><br>
<a name="N10323">Figure 5. Struts overview</a><br>
<!--[if gte vml 1]><v:shape
 id="_x0000_s1045" type="#_x0000_t75" alt="Struts overview" style='width:307.5pt;
 height:127.5pt'>
 <v:imagedata src="strutstut_files/image005.gif" o:href="http://www-128.ibm.com/developerworks/ibm/library/j-struts/mvc2_struts.gif"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=410 height=170
src="strutstut_files/image005.gif" alt="Struts overview" v:shapes="_x0000_s1045"><![endif]></p>
<p>Struts overview </p>
<ul type="disc">
  <li>
  Client browser <br>
  An HTTP request from the client browser creates an event. The Web container 
  will respond with an HTTP response. </li>
  <li>
  Controller <br>
  The Controller receives the request from the browser, and makes the decision 
  where to send the request. With Struts, the Controller is a command design 
  pattern implemented as a servlet. The struts-config.xml file configures the 
  Controller. </li>
  <li>
  Business logic <br>
  The business logic updates the state of the model and helps control the flow 
  of the application. With Struts this is done with an Action class as a thin 
  wrapper to the actual business logic. </li>
  <li>
  Model state <br>
  The model represents the state of the application. The business objects update 
  the application state. ActionForm bean represents the Model state at a session 
  or request level, and not at a persistent level. The JSP file reads 
  information from the ActionForm bean using JSP tags. </li>
  <li>
  View
  <br>
  The view is simply a JSP file. There is no flow logic, no business logic, and 
  no model information -- just tags. Tags are one of the things that make Struts 
  unique compared to other frameworks like Velocity. </li>
</ul>
<p>Note: &quot;Think thin&quot; when extending the Action class. The Action class should 
control the flow and not the logic of the application. By placing the business 
logic in a separate package or EJB, we allow flexibility and reuse.</p>
<p>Another way of thinking about Action class is as the Adapter design pattern. 
The purpose of the Action is to &quot;Convert the interface of a class into another 
interface the clients expect. Adapter lets classes work together that couldn_t 
otherwise because of incompatibility interface&quot; (from Design Patterns - Elements 
of Reusable OO Software by Gof). The client in this instance is the 
ActionServlet that knows nothing about our specific business class interface. 
Therefore, Struts provides a business interface it does understand, Action. By 
extending the Action, we make our business interface compatible with Struts 
business interface. (An interesting observation is that Action is a class and 
not an interface. Action started as an interface and changed into a class over 
time. Nothing&#39;s perfect.) </p>
<p>The Error classes <br>
The UML diagram (Figure 6) also included ActionError and ActionErrors. 
ActionError encapsulates an individual error message. ActionErrors is a 
container of ActionError classes that the View can access using tags. 
ActionErrors is Struts way of keeping up with a list of errors.</p>
<p><br>
<a name="N103B5">Figure 7. UML diagram of the relationship of the Command 
(ActionServlet) to the Model (Action)</a><br>
<!--[if gte vml 1]><v:shape
 id="_x0000_s1046" type="#_x0000_t75" alt="Relationship of ActionServlet to Action"
 style='width:393.75pt;height:195.75pt'>
 <v:imagedata src="strutstut_files/image006.jpg" o:href="http://www-128.ibm.com/developerworks/ibm/library/j-struts/action_mapping.jpg"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=525 height=261
src="strutstut_files/image006.jpg" alt="Relationship of ActionServlet to Action"
v:shapes="_x0000_s1046"><![endif]></p>
<p>The ActionMapping class <br>
An incoming event is normally in the form of an HTTP request, which the servlet 
Container turns into an HttpServletRequest. The Controller looks at the incoming 
event and dispatches the request to an Action class. The struts-config.xml 
determines what Action class the Controller calls. The struts-config.xml 
configuration information is translated into a set of ActionMapping, which are 
put into container of ActionMappings. (If you have not noticed it, classes that 
end with s are containers)</p>
<p>The ActionMapping contains the knowledge of how a specific event maps to 
specific Actions. The ActionServlet (Command) passes the ActionMapping to the 
Action class via the perform() method. This allows Action to access the 
information to control flow.</p>
<p>ActionMappings <br>
ActionMappings is a collection of ActionMapping objects.</p>
<p>&nbsp;</p>
<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" width="100%" style="width: 100.0%; font-size: 10.0pt; font-family: Times New Roman">
  <tr>
    <td>
    <!--[if gte vml 1]><v:shape id="_x0000_s1047"
 type="#_x0000_t75" alt="" style='width:.75pt;height:.75pt'>
 <v:imagedata src="strutstut_files/image001.gif" o:href="http://www.ibm.com/i/v14/rules/blue_rule.gif"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=1 height=1
src="strutstut_files/image001.gif" v:shapes="_x0000_s1047"><![endif]></td>
  </tr>
</table>
<p>&nbsp;</p>

			<!-- #EndEditable --></div>
		<!-- End Content --></div>
	<!-- End Page Content -->
	<!-- Begin Footer -->
	<div id="footer">
	</div>
	<!-- End Footer --></div>
<!-- End Container -->

</body>

<!-- #EndTemplate -->

</html>
